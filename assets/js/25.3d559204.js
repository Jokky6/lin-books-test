(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{111:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第一章-关于教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-关于教程","aria-hidden":"true"}},[t._v("#")]),t._v(" 第一章 关于教程")]),t._v(" "),s("h2",{attrs:{id:"_1-1-教程简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-教程简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1 教程简介")]),t._v(" "),s("p",[t._v("本教程通过实战开源前后端分离CMS——Lin CMS全家桶（lin-cms-vue & lin-cms-tp5）为一个前端应用实现内容管理系统。一套教程入门上手vue、ThinkPHP两大框架，自用、工作、私单一次打通。")]),t._v(" "),s("h2",{attrs:{id:"_1-2-教程特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-教程特点","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2 教程特点")]),t._v(" "),s("ul",[s("li",[t._v("从0到1，涵盖开发环境搭建、项目分析、代码编写、线上部署完整教学")]),t._v(" "),s("li",[t._v("前后端分离的应用，紧跟潮流，前端VUE,后端ThinkPHP的主流技术栈。")]),t._v(" "),s("li",[t._v("充分利用框架特点实现各种实用、常用功能")]),t._v(" "),s("li",[t._v("结合自己爬坑的经历，力求每个知识点、功能点都解释清楚")]),t._v(" "),s("li",[t._v("相关技术和知识点、源码均可应用于企业项目中")])]),t._v(" "),s("p",[s("strong",[t._v("通过本课程可以掌握包括但不限于以下几点：")])]),t._v(" "),s("ul",[s("li",[t._v("掌握前后端分离的概念及运用、部署")]),t._v(" "),s("li",[t._v("掌握VUE应用开发")]),t._v(" "),s("li",[t._v("掌握ThinkPHP框架")]),t._v(" "),s("li",[t._v("掌握RESTFul接口开发")]),t._v(" "),s("li",[t._v("PHP高级特性的运用")]),t._v(" "),s("li",[t._v("debug思路和技巧")])]),t._v(" "),s("h2",{attrs:{id:"_1-3-前后端分离介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-前后端分离介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.3 前后端分离介绍")]),t._v(" "),s("p",[t._v("前后端分离是这几年在业界中经常看到的字眼，到如今已经俨然成为一种发展趋势甚至业界标准，很多人可能就是跟着用，但是不知道到底为什么要分离以及分离后的优缺点是什么。下面就请读者跟随者作者脚步，由浅及深地来一一剖析下这些问题。")]),t._v(" "),s("blockquote",[s("p",[t._v("名词解释"),s("br"),t._v("\n前端：指一个具体的应用，直接接触具体用户的，如一个PC网页、移动端H5、移动端App以及现在很火的小程序"),s("br"),t._v("\n后端：也叫服务端，由一堆你编写的代码组成，负责处理前端的业务请求并响应。"),s("br"),t._v("\nMVC：M（model模型层）V（view视图层）C(controller控制层)，一种软件架构模式。")])]),t._v(" "),s("p",[t._v("首先我们把两种不同的应用架构做一个简单的对比：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("前后端不分离，指前端的页面和数据都由后端渲染而成；后端是一个典型的MVC架构")])]),t._v(" "),s("li",[s("p",[t._v("前后端分离，指前端页面由前端自己生成，后端只负责提供数据，前端通过请求后端接口获取数据；后端有M和C层，但是没有V层。")])])]),t._v(" "),s("p",[t._v("由上面的对比可知，两种架构的关键区别在于后端有没有V层。在前后端分离的架构中，后端没后V层的实现，而是由前端自己去实现。说到这里就不得不解释一下MVC这三层的具体含义，知道了含义我们才能理解V层的实现方式变化所导致的一系列改变。")]),t._v(" "),s("ul",[s("li",[t._v("C（Controller控制层）")])]),t._v(" "),s("p",[t._v("控制器层是具体业务实现的入口，控制器层代码的内容一般是对某个业务实现做流程控制而不是具体的实现。怎么理解这句话呢，比如说你在网页点击了登陆，这个请求会先到控制层，控制层接收到请求后，会做一些判断，进而决定接下来做些什么，是继续调用真正的登陆实现逻辑还是直接拒绝，控制器层的任务就是接收、分配任务、返回结果，就像一个调度员角色一样，但它不具体负责处理业务实现。")]),t._v(" "),s("ul",[s("li",[t._v("M（Model模型层）")])]),t._v(" "),s("p",[t._v("模型层的主要任务是数据封装和数据持久化，这两者即可以合在一起讲，又可以拆出来说，理解起来会相对比较抽象，而且不同的语言和框架对模型层的运用和理解也略有差异，但总的来说都离不开这两点，这里我先举一个小的事例来解释说明，后面结合实战章节内容可以有个更直观的体会。")]),t._v(" "),s("p",[t._v("我们无论做什么开发都好，都免不了要操作数据库，操作数据库就面临了两个问题，一个是SQL语句以及数据格式问题，以ThinkPHP（以下简称：TP）为例，TP框架内置了一个Model模型类，一个类继承了Model类后就被定义为一个模型类，一个模型类对应一张数据库里的表。继承之后我们就可以通过实例化这个类来达到对表的增删查改，而整个过程你完全看不到任何SQL语句。")]),t._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设有一个User类，继承了Model，这时候他对应了数据中的user表。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询user表的所有数据，并输出一个数组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$userList")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("通过以上的代码片段可以看到，虽然我们在操作数据库里的一张表，但看起来更像是在操作一个对象，是的，Model类把跟数据库有关东西都"),s("strong",[t._v("封装")]),t._v("成一个类供你去实例化调用里面的方法并以一个统一的格式返回，这就是模型层的具体运用体现。模型的存在，让你的数据能够变得可复用、可扩展，因为这时候他已经是一个类了。")]),t._v(" "),s("p",[t._v("这时候读者可能会有另外一个疑问，模型层一定是和数据库相关吗？不是的。不继承Model类也可以是个模型类，比如说作者是做票务系统的，我有一个查询航班的接口，这个接口会返回不同公司的票务信息，每家公司的票务信息字段都不同，于是我就定义一个模型类，这个类里面会分别获取不同公司的票务信息，同时有一个私有方法用于把每家公司的票务信息封装成一个格式统一且排好序的数组，这样我在控制器层调用的时候，只需要调用这个模型类的某个查询方法，比如"),s("code",[t._v("getFlight('2019-06-22')")]),t._v("，就会返回一个包含每个不同公司的航班列表数组，而且由于格式统一，在调用层面就可以避免因为不同公司票务字段差异导致的额外代码量。同时由于封装了模型类，我可以还通过控制传入的参数，实现指定要获取的公司数量，这也是模型层的具体运用体现。")]),t._v(" "),s("blockquote",[s("p",[t._v("模型层在现实业务中运用非常广泛，体现的形式也多种多样，甚至有些也不叫模型层，或者是再细分为其它层。但无论是以什么形式体现，最终实现的目的都是数据到模型。")])]),t._v(" "),s("ul",[s("li",[t._v("V（View视图层）")])]),t._v(" "),s("p",[t._v("视图层通常由一个个模板文件组件组成，用于被一个叫"),s("code",[t._v("模板引擎")]),t._v("的东西渲染成具体的页面。以TP框架为例，我们在项目根目录新建了一个"),s("code",[t._v("view")]),t._v("目录，用于存放视图层的文件即模板文件。假设我们在该目录下面新建了一个名为"),s("code",[t._v("edit")]),t._v("的模板，这时候就可以在控制器层调用")]),t._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("controller")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("think"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Controller")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Controller")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'edit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("这样当我们访问这个控制器的时候，就会得到一个已经渲染好的html页面，内容都是在"),s("code",[t._v("edit")]),t._v("模板文件中定义好的。")]),t._v(" "),s("p",[t._v("通过上面对MVC的介绍，我们已经大概了解了MVC的作用以及含义，那么回到前面的问题，将后端原有的View层分离出去，实现前后端分离架构的意义在哪里：")]),t._v(" "),s("ul",[s("li",[t._v("分而治之")])]),t._v(" "),s("p",[t._v("这也许是最直观的作用，以前可能并没有明确的前端开发者、后端开发者这种概念，都是基于MVC一把梭全干。但每个开发者内心还是有倾向性的，有些人就是喜欢写PHP、Java、Python,但不喜欢写html、js、css，有些人则相反。前后端分离架构的出现，让开发者可以有了选择的可能，专注做前端的事，或者专注做后端的事。")]),t._v(" "),s("ul",[s("li",[t._v("并行开发")])]),t._v(" "),s("p",[t._v("前后端分离之后，前端只负责实现页面和交互，后端只负责业务逻辑和数据接口，前后端通过实现约定要的接口来通信。正因为基于这种交互的方式，前端开发者和后端开发者就可以根据各自的任务内容去实现自己那一部分的代码，期间互不影响，最后通过已经约定好的接口进行联调测试，最后发布上线。")]),t._v(" "),s("blockquote",[s("p",[t._v("前后端不分离也可以并行开发，但是效率太低。因为模板文件里面会同时掺杂html代码、js代码甚至PHP代码，比如说负责写模板文件的开发者在处理模板内的PHP代码的时候，就必须知道一些PHP变量的含义以及规则等，核心业务逻辑的改变可能也会导致模板内容要跟着改变。前后端分离则不存在这个问题。")])]),t._v(" "),s("ul",[s("li",[t._v("接口复用")])]),t._v(" "),s("p",[t._v("前后端分离之后，后端跟前端的交互必须是以接口的形式，接口本身只是提供数据和接收数据，和语言与实现方式无关。这就意味着后端不用关心前端到底是什么应用（PC、小程序、安卓、iOS等），前端也不需要关心后端是什么语言、怎么实现的。只要有接口，各个前端应用获取到数据后根据自己的需要进行数据加工处理或者发送数据到接口，这样子就可以实现接口复用，后端不必为每一个不同类型的应用进行重复开发。就拿我个人手头一个项目来说，前端有12个小程序、PC端网站1个、移动端H5 1个，都是共用同一套接口。")]),t._v(" "),s("ul",[s("li",[t._v("定位问题")])]),t._v(" "),s("p",[t._v("前后端分离之后，当BUG出现的时候定位问题显得可能容易，不用先纠结到底是业务逻辑出问题了还是模板文件里出现了，可以快速定位问题所处的位置并针对性的debug。")]),t._v(" "),s("p",[t._v("当然，没有什么是完美的，就如同MVC模式的出现虽然解决一些问题，但随着互联网的发展，一些问题也开始暴露了出来，前后端分离架构也是如此。从工作的角度上来说，是否前后端分离需要客观考虑公司的实际情况，比如说在人员配置不足的情况下，你需要同时负责前后端的开发工作，这时候前后端分离等于你还需要掌握另一端的技术栈，你也还是要写完一端写另一端，如果这时候没有接口复用的需求那前后端分离无疑是增加了自己的学习成本和工作成本，但从学习、成长、长远职业规划角度上来说还是必须得掌握的，毕竟稍有规模的公司前后端分离已经是标配。")]),t._v(" "),s("p",[t._v("以上就是关于前后分离的介绍，网上也有不少关于前后端分离的介绍和思考读者可自行查阅。")]),t._v(" "),s("h2",{attrs:{id:"_1-4-lincms介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-lincms介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.4 LinCMS介绍")]),t._v(" "),s("h3",{attrs:{id:"什么是lin-cms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是lin-cms","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是Lin CMS")]),t._v(" "),s("blockquote",[s("p",[t._v("Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套"),s("strong",[t._v("内容管理系统框架")]),t._v("。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率。")])]),t._v(" "),s("p",[t._v("也许你还是没看懂，因为你可能连CMS是什么都不知道，我们先来了解下CMS的专业解释是什么：")]),t._v(" "),s("blockquote",[s("p",[t._v("内容管理系统（英语：content management system，缩写为 CMS）是指在一个合作模式下，用于管理工作流程的一套制度。该系统可应用于手工操作中，也可以应用到计算机或网络里。作为一种中央储存器（central repository），内容管理系统可将相关内容集中储存并具有群组管理、版本控制等功能。版本控制是内容管理系统的一个主要优势。\n内容管理系统在物品或文案或数据的存储、掌管、修订（盘存）、语用充实、文档发布等方面有着广泛的应用。现在流行的开源CMS系统有WordPress、Joomla!、Drupal、Xoops、CmsTop等。")])]),t._v(" "),s("p",[t._v("依然看不懂，接下来是我的翻译：")]),t._v(" "),s("p",[t._v("假设你现在有一个电商网站，网站有商品售卖功能，那么有几件事是你必须要做的：")]),t._v(" "),s("ul",[s("li",[t._v("商品上架")]),t._v(" "),s("li",[t._v("商品下架")]),t._v(" "),s("li",[t._v("订单报表查询")])]),t._v(" "),s("p",[t._v("怎么实现以上3点需求呢？我们知道绝大部分数据都是会存放在数据库的，那么直接对数据库进行增、删、查、改可以实现吗？可以实现。但是，这会带来几个问题：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("效率低")]),t._v("。数据库中实际存储的数据有可能是加密的或者是一个枚举值，如果直接插入业务数据会导致报错或其他不可预知的情况出现。你要先了解每个字段的含义和格式然后才能进行插入。如果数据库中表与表之间存在关联关系，你修改一张表，同时还得修改其他表。并且表与表的关联关系根据业务需求的不同，可能会是一对一、一对多、多对多。")]),t._v(" "),s("li",[s("strong",[t._v("技术门槛高")]),t._v("。无论是可视化的数据库管理后台还是命令行界面，都是面向专业技术人员而不是普通业务人员，在不具备技术知识的情况下操作数据库可能会引发删库到跑路。如果每一次商品的变动和订单查询都让专业技术人员来操作则显得更加不合理。")]),t._v(" "),s("li",[s("strong",[t._v("安全性差")]),t._v(" 。正常情况下，不同部门和职位级别都对应了不同的权限，可操作的内容和范围都不尽相同，数据库管理系统没办法提供完全满足业务场景的权限控制。")])]),t._v(" "),s("blockquote",[s("p",[t._v("这里仅列举了几点比较简单易懂的场景，更多体现读者可结合自身开发经历或者公司项目去联想")])]),t._v(" "),s("p",[t._v("鉴于遇上3点问题，直接操作数据库不是一个长久、现实的方式，CMS(内容管理系统)作为一种解决方案，应运而生。")]),t._v(" "),s("h3",{attrs:{id:"cms解决了什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms解决了什么问题","aria-hidden":"true"}},[t._v("#")]),t._v(" CMS解决了什么问题")]),t._v(" "),s("p",[t._v("CMS在可视化了数据库数据的基础上，让内容的呈现方式和内容更加接近现实具体业务，并且提供了一系列受权限控制的、直观的业务数据和操作。比如说会给你个菜单，菜单上面对应了订单查询、会员管理、商品管理等等业务模块，你可以点击进去进行查询、新增、删除、修改（如果你有权限），你能看到的、可以操作的内容都是可以定制的。对于使用者来说，只要会基本的电脑操作，就可以使用CMS去管理自己负责的那块业务数据。")]),t._v(" "),s("p",[t._v("回到开始的问题，CMS是什么东西到这里读者应该有个大致的了解了，那么Lin CMS到底是什么？这里我们先访问一下这个线上的demo，顺便可以消化吸收下前面讲过的内容，"),s("a",{attrs:{href:"http://face.cms.7yue.pro/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lin CMS demo"),s("OutboundLink")],1),t._v("，账号super，密码123456。"),s("br"),t._v("\n在demo中我们看到了诸如权限管理、图书管理、日志管理等模块，你在里面的操作最终都会作用于数据库，而整个过程你不需要直接接触数据库。看到这里读者再回过头看开头那段应该就清晰多了，LinCMS在实现CMS的基础上又增加了几个特点：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("开源")]),t._v("。开源意味着你可以直接拿到项目的源代码进行自由的定制和阅读学习源码的设计和思路。")]),t._v(" "),s("li",[s("strong",[t._v("优雅美观的页面设计")]),t._v("。开发者可以复用内置的样式轻松实现统一、美观的界面而不用自己去编写复杂的样式代码")]),t._v(" "),s("li",[s("strong",[t._v("流畅的交互体验")]),t._v(" 。框架已经帮你定义或者解决好了诸多性能和交互问题，开发者只需要专注于开发自己的业务逻辑。")]),t._v(" "),s("li",[s("strong",[t._v("灵活、可扩展的开发框架")]),t._v("。无论是前端的Vue还是服务端的各个语言版本，都实现了高质量的代码设计，内置了许多常用和核心的功能模块，开箱即用。开发者在开发的时候只需专注自己的业务逻辑，按需调用，也可以扩展或者重写框架原有的组件或者类库来实现一些定制化的需求。")]),t._v(" "),s("li",[s("strong",[t._v("前后端分离的架构")]),t._v("。目前市面上多数CMS系统都不是前后端分离的应用，Lin CMS提供了完整的解决方案，前端是VUE，后端则有基于Python的Flask框架、基于Node.js的koa,基于PHP的ThinkPHP可供选择，未来还有会其他语言的支持，如Java、golang等。")])]),t._v(" "),s("blockquote",[s("p",[t._v("总的来说就是提高开发效率，让开发者专注业务逻辑。")])]),t._v(" "),s("p",[t._v("更多了解请访问"),s("a",{attrs:{href:"https://github.com/TaleLin",target:"_blank",rel:"noopener noreferrer"}},[t._v("TaleLin"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_1-5-技术储备要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-技术储备要求","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.5 技术储备要求")]),t._v(" "),s("ul",[s("li",[t._v("PHP基础语法及面向对象概念")]),t._v(" "),s("li",[t._v("TP5基础知识(至少需要了解控制器与路由的基本概念)")]),t._v(" "),s("li",[t._v("JavaScript基础知识")]),t._v(" "),s("li",[t._v("vue基础知识(至少知道组件的基本概念)")])]),t._v(" "),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.kancloud.cn/manual/thinkphp5_1/353946",target:"_blank",rel:"noopener noreferrer"}},[t._v("ThinkPHP5.1完全开发手册"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue官方文档"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://coding.imooc.com/class/203.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue2.5开发去哪儿网App 从零基础入门到实战项目"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("浏览一遍，大概知道都有什么东西即可，有需要的时候再拿出来翻一翻看具体某个章节。")])]),t._v(" "),s("h2",{attrs:{id:"_1-6-维护与提问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-维护与提问","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.6 维护与提问")]),t._v(" "),s("h3",{attrs:{id:"更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 更新")]),t._v(" "),s("p",[t._v("由于目前LinCMS目前还处在不断迭代更新阶段，TP5.1版本也在持续跟进，所以本课程的内容也会随着适配的进度而增加或者调整。")]),t._v(" "),s("h3",{attrs:{id:"完善"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完善","aria-hidden":"true"}},[t._v("#")]),t._v(" 完善")]),t._v(" "),s("p",[t._v("局限于个人技术水平和写作能力，如果教程中有哪些地方读者觉得不对或者看不懂需要再讲仔细些可以随时提出。")]),t._v(" "),s("h3",{attrs:{id:"催更、提问与交流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#催更、提问与交流","aria-hidden":"true"}},[t._v("#")]),t._v(" 催更、提问与交流")]),t._v(" "),s("p",[t._v("读者对本教程或者GitHub项目有任何疑问、建议都可以在作者GitHub仓库提个"),s("a",{attrs:{href:"https://github.com/ChenJinchuang/lin-cms-tp5/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("或者")]),t._v(" "),s("p",[t._v("QQ群：643205479")]),t._v(" "),s("h3",{attrs:{id:"请我喝咖啡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请我喝咖啡","aria-hidden":"true"}},[t._v("#")]),t._v(" 请我喝咖啡")]),t._v(" "),s("img",{attrs:{src:"images/微信图片_20190617000225.jpg",width:"300",height:"450",alt:"图片名称",align:"center"}}),t._v(" "),s("template",{slot:"author"},[s("Author",{attrs:{name:"沁塵",job:"网易杭州研究院云计算技术总监",title:"Lin CMS PHP&Vue教程"}})],1),s("template",{slot:"adverse"},[s("Adverse",{attrs:{title:"Lin CMS PHP&Vue教程"}})],1)],2)},[],!1,null,null,null);a.default=n.exports}}]);